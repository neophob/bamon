
const CpuBoard = require('../lib/boards/cpu-board');
const decode = require('./rle.js');

const W = 512*8;
const H = 512*8;

let cpuBoard;
let romObject;
let uistate;

const SYSTEM_ROM_SIZE_BYTES = 32 * 1024;
const diagrams = [];

//The colour palette of 1959 - Le Corbusier's Architectural Polychromy
const allC = ['#8A310F', '#C58BA2', '#653626', '#152328', '#B5B32B', '#6E9D7D', '#9CA0A2', '#585552', '#667BB5', '#DEB274', '#742E40', '#A2C2E9', '#A8AAAC', '#F1D3A5', '#3D3C38', '#D68362', '#2A3C71', '#5B6068', '#EDC433', '#232F34'];

//the rom
const rleB64File = '';

const rleUint8Array = new Uint8Array(atob(rleB64File).split('').map(
    (char)=>char.charCodeAt(0)
));
const u06Rom = decode(rleUint8Array);

class DG {
  constructor(n = 64, name) {
    this.n = n;
    this.name = name;
    this.values = new Array(n);//.fill(0);
    this.pos = 0;
    this.max = 0;
    this.interesting = 0;
  }

  valueAsString() {
    return this.values.join('');
  }

  get8bitNormalizedValues() {
    const mavVal = this.max > 0 ? this.max : 1;
    return this.values.map((v) => parseInt(0.5 + v / mavVal * 255));
  }

  // add value to diagram
  add(value) {
    this.values[this.pos] = value;
    this.pos = (this.pos + 1) % this.n;
    this.max = value > this.max ? value : this.max;

    // calculate how interesting (changes) a diagram is
    let interesting = 0;
    this.avg = 0;
    for (let nn = 0; nn < this.values.length - 1; nn++) {
      const aa = this.values[nn] - this.values[nn + 1];
      const bb = aa < 0 ? 0-aa : aa;
      interesting += (bb > 0) ? 1 : 0;

      if (this.max > 0)
        this.avg += this.values[nn]/this.max;
    }
    this.interesting = interesting;
  }

}
function diag(name, n) {
  if (!diagrams[name]) {
    diagrams[name] = new DG(n, name);
  }
  return diagrams[name];
}

function getRandomInt(max) {
  return (fxrand()*max)|0;
}


// -- ### CONFIG START --

let cpuSteps = 500 + getRandomInt(10000);
let cpuStepsInitialRound = 5000 + getRandomInt(30000);
// initial rounds and viible rounds need to be at lest 96 like the diag size
let initialRounds = 92 + getRandomInt(600); //600);

window.$fxhashFeatures = {
  "CPU Steps": cpuSteps,
  "Initial Rounds": initialRounds,
}
console.table(window.$fxhashFeatures);

console.table('INIT', {cpuSteps,initialRounds,cpuStepsInitialRound});
// -- ### CONFIG END --


function rndr() {

  const interestingMEM = [];
  const minimalInterest = 12;

  for (let rr = 0; rr < initialRounds; rr++) {
    cpuBoard.E(cpuSteps, 16);
    uistate = cpuBoard.S();
  
    ['scanline','activepage','tk','vidOutPointer'].forEach((reg, ofs) => {
      const dd = diag('DMD'+(ofs+1));
      dd.add(uistate.dmd[reg]);
    });
  
    ['X','Y','S','U','CC','A','DP','B','PC','irq', 'mIRQ'].forEach((reg, ofs) => {
      const dd = diag('CPU'+(ofs+1));
      dd.add(uistate.cpu[reg]);
    });
  
    uistate.ram.forEach((value,ofs) => {
      //if (ofs <  10) console.info(ofs,value)
      const dd = diag('MEM'+ofs, 64);
      dd.add(value);
    });

    ['irqEna','wadogTicks','zcf','diagLed','activeRomBnk','lmpCol','lmpRow','ticksZC','inpCol', 'irqCountGI'].forEach((reg, ofs) => {
      const dd = diag('WPC'+(ofs+1));
      dd.add(uistate.wpc[reg]);
    });    
  }

// extract interesting values
['scanline','activepage','tk','vidOutPointer'].forEach((reg, ofs) => {
  const dd = diag('DMD'+(ofs+1));
  if (dd.interesting > minimalInterest) {
    interestingMEM.push(dd);
  } 
});

['X','Y','S','U','CC','A','DP','B','PC','irq', 'mIRQ'].forEach((reg, ofs) => {
  const dd = diag('CPU'+(ofs+1));
  if (dd.interesting > minimalInterest) {
    interestingMEM.push(dd);
  } 
});

let uniqueMemState = [];
uistate.ram.forEach((value,ofs) => {
  //if (ofs <  10) console.info(ofs,value)
  const dd = diag('MEM'+ofs, 64);
  if (dd.interesting > minimalInterest) {
    const ddStr = dd.valueAsString();
    const containsValue = uniqueMemState.includes(ddStr);

    if (!containsValue) {
      interestingMEM.push(dd);
      if (!containsValue) {
        uniqueMemState.push(ddStr);
      }  
    }
  } 

});
uniqueMemState = [];

['irqEna','wadogTicks','zcf','diagLed','activeRomBnk','lmpCol','lmpRow','ticksZC','inpCol', 'irqCountGI'].forEach((reg, ofs) => {
  const dd = diag('WPC'+(ofs+1));
  dd.add(uistate.wpc[reg]);
  if (dd.interesting > minimalInterest) {
    interestingMEM.push(dd);
  }
});  

  const src = interestingMEM
    .filter((dd) => dd.interesting > 1 && (new Set(dd.values).size) > 2)
    .sort((a, b) => {
      if (a.interesting < b.interesting) return -1;
      if (a.interesting > b.interesting) return 1;
      if (a.max < b.max) return -1;
      if (a.max > b.max) return 1;
      return 0;
    }).reverse();

  // TODO validate lowest value
  if (src.length < 12) {
    console.log('retry:', src.length)
    rndr();
  }

  c.fillStyle = 'black';
  c.fillRect(0, 0, W, H);

  let rawData = [];
  for (let i = 0; i<src.length; i++) {
    rawData = rawData.concat(src[i].get8bitNormalizedValues());
  }
  const elementsPerEntry = 10;
  const dataForElements = rawData.length / elementsPerEntry
  console.table({elementsPerEntry, dataForElements});

  let x = 0;
  let y = 0;
  for (let i = 0; i<dataForElements; i++) {
    const ofs = i * elementsPerEntry;
    const col = rawData[ofs+0];
    const border = rawData[ofs+1] > 128;
    const style = rawData[ofs+2];
    const xSize = rawData[ofs+3];
    const ySize = rawData[ofs+4];
    const xMul = rawData[ofs+5] >> 2;
    const yMul = rawData[ofs+6] >> 2;
    const enableMulX = rawData[ofs+7] > 200;
    const strokeWidth = 8*(rawData[ofs+8] >> 3);
    const scol = rawData[ofs+9];
    const enableMulY = rawData[ofs+10] > 200;


    console.log(
      i, '#',
      col,border,style, '#',
      xSize,
      ySize,
      xMul,
      yMul,
      enableMulX,enableMulY,strokeWidth
    )
  
    const xpos = x*250;
    const ypos = y*250;
    const xWidth = xSize * (enableMulX ? xMul : 1);
    const yHeight = ySize * (enableMulY ? yMul : 1);
    if (border) {
      c.strokeWidth = strokeWidth;
      c.strokeStyle = allC[scol%allC.length];
      c.strokeRect(xpos, ypos, xWidth, yHeight);      
    }
    //c.fillStyle = allC[col%allC.length];
    c.fillStyle = `rgb(${col}, ${col}, ${col})`;
    c.fillRect(xpos, ypos, xWidth, yHeight);
  
    if (++x > 16) {
      x = 0;
      y++;
    }
  }

  return    requestAnimationFrame(rndr);

  const ms = uistate.cpu.tick / 2000
  console.info('Emulator runtime: ' + ms + 'ms');

  fxpreview();
  console.table('DONE');  
}

window.onload = () => {
  const a = document.getElementById("c");
  a.width = W;
  a.height = H;
  c = a.getContext("2d");

  console.info('# WPCEMU')
  
  romObject = {
    systemRom: u06Rom.subarray(-SYSTEM_ROM_SIZE_BYTES),
    gameRom: u06Rom,
  };

  cpuBoard = CpuBoard(romObject);
  rndr();
};
